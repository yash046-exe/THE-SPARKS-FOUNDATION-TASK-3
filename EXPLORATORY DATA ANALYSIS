# Import all necessary Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
data=pd.read_csv("SampleSuperstore.csv")
data.head(10)
data.tail(10)
data.describe()
data.info()
data.isnull().sum()
data.columns
data.shape
data.duplicated().sum()
data.nunique()

# Exploratory Data Analysis
plt.figure(figsize=(8,5))
sns.kdeplot(data['Sales'],color='Blue',label='Sales',shade=True,bw=25)
sns.kdeplot(data['Profit'],color='Green',label='Profit',shade=True,bw=25)
plt.xlim([-100,1000])
plt.legend()
# Numerical data
numerical_data=data.select_dtypes(exclude=[object])          
print(numerical_data.shape)
# Visualing the correlation matrix using heatmap
plt.figure(figsize=(15,10))
sns.heatmap(data.corr(),cmap='rocket_r',annot=True)

# Plotting Graph
data.hist(bins=50 ,figsize=(20,20))
plt.show();

sns.countplot(x='Ship Mode',data=data,palette='tab10')
plt.title('Ship Mode',fontsize=30)

#1. sales 2. Discount 3. Profit
df_shipmode.plot.pie(subplots=True,
                     figsize=(18, 20), 
                     autopct='%1.1f%%', 
                     labels = df_shipmode.index)
                     
# Based on Category
sns.pairplot(data,hue='Category')
data['Category'].value_counts()
sns.countplot(x='Category',data=data,palette='tab10')
plt.title('Category',fontsize=30)
df_category = data.groupby(['Category'])[['Sales', 'Discount', 'Profit']].mean()
df_category
#1. sales 2. Discount 3. Profit
df_category.plot.pie(subplots=True, 
                     figsize=(18, 20), 
                     autopct='%1.1f%%', 
                     labels = df_category.index)

plt.figure(figsize = (15,15))
plt.pie(df_sub_category['Sales'], labels = df_sub_category.index, autopct = '%1.1f%%')
plt.title('Sub-Category Wise Sales Analysis', fontsize = 30)
plt.legend()
plt.xticks(rotation = 90)
plt.show()
df_sub_category.sort_values('Profit')[['Sales','Profit']].plot(kind='bar',
                                                              figsize= (15,7),
                                                              label=['Avg Sales Price($)','Profit($)'])
# Based on State
sns.pairplot(data,hue='State')
data['State'].value_counts()
plt.figure(figsize=(18,10))
sns.countplot(x = 'State',data = data, palette = 'tab10')
plt.xticks(rotation=90)
plt.title('State',fontsize=30)
data['State'].value_counts().head(10)
df_state= data.groupby(['State'])[['Sales', 'Discount', 'Profit']].mean()
df_state.head(10)
df_state1=df_state.sort_values('Profit')
df_state1[['Profit']].plot(kind = 'bar', figsize = (15,8))
plt.title('State wise Profit Analysis', fontsize = 30)
plt.ylabel('Profit per Sate')
plt.xlabel('States')
plt.show()
df_state['Sales'].plot(kind='pie',
                        figsize = (25,20),
                        autopct='%1.1f%%',
                        startangle=90,     # start angle 90° (Africa)
                        shadow=True)
plt.title('State wise analysis of Sale',fontsize=30)
df_state1['Discount'].plot(kind='bar',figsize=(18,8))
plt.title('State wise analysis of Discount', fontsize=30)
# Based on Region
sns.pairplot(data,hue='Region')
data['Region'].value_counts()
sns.countplot(x = 'Region',data = data, palette = 'tab10')
plt.title('Region',fontsize=30)
df_region = data.groupby(['Region'])[['Sales', 'Discount', 'Profit']].mean()
df_region
#1. sales 2. Discount 3. Profit
df_region.plot.pie(subplots=True, 
                   figsize=(18, 20), 
                   autopct='%1.1f%%',
                   labels = df_region.index)
# Based on Segment
sns.pairplot(data,hue='Segment')
data['Segment'].value_counts()
sns.countplot(x = 'Segment',data = data, palette = 'tab10')
plt.title('Segment',fontsize=30)
data['Segment'].value_counts()
df_segment= data.groupby(['Segment'])[['Sales', 'Discount', 'Profit']].mean()
df_segment
#1. sales 2. Discount 3. Profit
df_segment.plot.pie(subplots=True, 
                    autopct='%1.1f%%',
                    figsize=(18, 20),
                    startangle=90,     # start angle 90° (Africa)
                    shadow=True,
                    labels = df_segment.index)
plt.title('Segment wise analysis of Sale, Discount, profit')
#Based on Quantity
sns.pairplot(data,hue='Quantity')
data['Quantity'].value_counts()
sns.countplot(x = 'Quantity',data = data, palette = 'tab10')
plt.title('Quantity',fontsize=30)
df_quantity = data.groupby(['Quantity'])[['Sales', 'Discount', 'Profit']].mean()
df_quantity.head(10)
#1. sales 2. Discount 3. Profit
df_quantity.plot.pie(subplots=True, 
                    autopct='%1.1f%%',
                    figsize=(20, 20),
                     pctdistance=0.69,
                    startangle=90,     # start angle 90° (Africa)
                    shadow=True,
                    labels = df_quantity.index)
plt.title('Quantity wise analysis of Sale, Discount, profit')
#Based on Discount
sns.pairplot(data,hue='Discount')
data['Discount'].value_counts()
sns.countplot(x = 'Discount',data = data, palette = 'tab10')
plt.title('Discount',fontsize=30)
fig, axs = plt.subplots(ncols=2, nrows = 2, figsize = (15,15))
sns.distplot(data['Sales'], color = 'red',  ax = axs[0][0])
sns.distplot(data['Profit'], color = 'green',  ax = axs[0][1])
sns.distplot(data['Quantity'], color = 'orange',  ax = axs[1][0])
sns.distplot(data['Discount'], color = 'blue',  ax = axs[1][1])
axs[0][0].set_title('Sales Distribution', fontsize = 20)
axs[0][1].set_title('Profit Distribution', fontsize = 20)
axs[1][0].set_title('Quantity Distribution', fontsize = 20)
axs[1][1].set_title('Discount Distribution', fontsize = 20)
plt.show()

#1.State Wise
data['Country'].value_counts()
df1 = data['State'].value_counts()
df1.head(10)
df1.plot(kind='bar',figsize=(15,5))
plt.ylabel('Frequency / Number of deals')
plt.xlabel('States')

plt.title('State Wise Dealings', fontsize = 30)
plt.show()
data['State'].value_counts().mean()
df2 = data['City'].value_counts()
df2=df2.head(50)
df2.plot(kind='bar',figsize=(15,5))
plt.ylabel('Frequency / Number of deals')
plt.xlabel('City')

plt.title('City Wise Dealings', fontsize = 30)
plt.show()
data['City'].value_counts().mean()
